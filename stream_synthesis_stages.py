import streamlit as st
import plotly.graph_objects as go
import os
import pandas as pd
from stream_funcs import countries_from_multiselect
from st_aggrid import AgGrid, GridUpdateMode
from st_aggrid.grid_options_builder import GridOptionsBuilder

print(os.environ.get('PYTHONPATH'))

# Initialize session state if it hasn't been initialized
if 'chem_unit_price' not in st.session_state:
    st.session_state.chem_unit_price = None

if 'synth_chem_df_list' not in st.session_state:
    st.session_state.synth_chem_df_list = []

if 'button_clicked' not in st.session_state:
    st.session_state.button_clicked = False


def run_app():


    st.title("Chemical Query")

    # Text Input
    chem = st.text_input("Enter the Chemical Name:")

    # Radio button
    options = ["Original Data", "GPT Enriched"]
    radio_button = st.radio("Pick a Database:", options)

    pubchem = False
    partial = False

    if radio_button == "GPT Enriched":
        # Checkbox
        pubchem = st.checkbox("PubChem Synonyms")
        partial = st.checkbox("Allow Partial Match")

    if st.button('Submit'):
        st.session_state.button_clicked = True


    # Submit Button
    if st.session_state.button_clicked:

        # Multi-select for countries
        countries = st.multiselect('Select Countries',
                                   [
                                       "ğŸ‡¦ğŸ‡« - Afghanistan", "ğŸ‡¦ğŸ‡± - Albania", "ğŸ‡©ğŸ‡¿ - Algeria", "ğŸ‡¦ğŸ‡© - Andorra",
                                       "ğŸ‡¦ğŸ‡´ - Angola", "ğŸ‡¦ğŸ‡¬ - Antigua and Barbuda", "ğŸ‡¦ğŸ‡· - Argentina",
                                       "ğŸ‡¦ğŸ‡² - Armenia", "ğŸ‡¦ğŸ‡º - Australia", "ğŸ‡¦ğŸ‡¹ - Austria", "ğŸ‡¦ğŸ‡¿ - Azerbaijan",
                                       "ğŸ‡§ğŸ‡¸ - Bahamas", "ğŸ‡§ğŸ‡­ - Bahrain", "ğŸ‡§ğŸ‡© - Bangladesh", "ğŸ‡§ğŸ‡§ - Barbados",
                                       "ğŸ‡§ğŸ‡¾ - Belarus", "ğŸ‡§ğŸ‡ª - Belgium", "ğŸ‡§ğŸ‡¿ - Belize", "ğŸ‡§ğŸ‡¯ - Benin", "ğŸ‡§ğŸ‡¹ - Bhutan",
                                       "ğŸ‡§ğŸ‡´ - Bolivia", "ğŸ‡§ğŸ‡¦ - Bosnia and Herzegovina", "ğŸ‡§ğŸ‡¼ - Botswana",
                                       "ğŸ‡§ğŸ‡· - Brazil", "ğŸ‡§ğŸ‡³ - Brunei", "ğŸ‡§ğŸ‡¬ - Bulgaria", "ğŸ‡§ğŸ‡« - Burkina Faso",
                                       "ğŸ‡§ğŸ‡® - Burundi", "ğŸ‡¨ğŸ‡» - Cape Verde", "ğŸ‡°ğŸ‡­ - Cambodia", "ğŸ‡¨ğŸ‡² - Cameroon",
                                       "ğŸ‡¨ğŸ‡¦ - Canada", "ğŸ‡¨ğŸ‡« - Central African Republic", "ğŸ‡¹ğŸ‡© - Chad", "ğŸ‡¨ğŸ‡± - Chile",
                                       "ğŸ‡¨ğŸ‡³ - China", "ğŸ‡¨ğŸ‡´ - Colombia", "ğŸ‡°ğŸ‡² - Comoros", "ğŸ‡¨ğŸ‡¬ - Congo (Republic)",
                                       "ğŸ‡¨ğŸ‡© - Congo (DRC)", "ğŸ‡¨ğŸ‡· - Costa Rica", "ğŸ‡­ğŸ‡· - Croatia", "ğŸ‡¨ğŸ‡º - Cuba",
                                       "ğŸ‡¨ğŸ‡¾ - Cyprus", "ğŸ‡¨ğŸ‡¿ - Czech Republic", "ğŸ‡©ğŸ‡° - Denmark", "ğŸ‡©ğŸ‡¯ - Djibouti",
                                       "ğŸ‡©ğŸ‡² - Dominica", "ğŸ‡©ğŸ‡´ - Dominican Republic", "ğŸ‡ªğŸ‡¨ - Ecuador", "ğŸ‡ªğŸ‡¬ - Egypt",
                                       "ğŸ‡¸ğŸ‡» - El Salvador", "ğŸ‡¬ğŸ‡¶ - Equatorial Guinea", "ğŸ‡ªğŸ‡· - Eritrea",
                                       "ğŸ‡ªğŸ‡ª - Estonia", "ğŸ‡¸ğŸ‡¿ - Eswatini", "ğŸ‡ªğŸ‡¹ - Ethiopia", "ğŸ‡«ğŸ‡¯ - Fiji", "ğŸ‡«ğŸ‡® - Finland",
                                       "ğŸ‡«ğŸ‡· - France", "ğŸ‡¬ğŸ‡¦ - Gabon", "ğŸ‡¬ğŸ‡² - Gambia",
                                       "ğŸ‡¬ğŸ‡ª - Georgia", "ğŸ‡©ğŸ‡ª - Germany", "ğŸ‡¬ğŸ‡­ - Ghana", "ğŸ‡¬ğŸ‡· - Greece", "ğŸ‡¬ğŸ‡© - Grenada",
                                       "ğŸ‡¬ğŸ‡¹ - Guatemala", "ğŸ‡¬ğŸ‡³ - Guinea", "ğŸ‡¬ğŸ‡¼ - Guinea-Bissau",
                                       "ğŸ‡¬ğŸ‡¾ - Guyana", "ğŸ‡­ğŸ‡¹ - Haiti", "ğŸ‡­ğŸ‡³ - Honduras", "ğŸ‡­ğŸ‡º - Hungary", "ğŸ‡®ğŸ‡¸ - Iceland",
                                       "ğŸ‡®ğŸ‡³ - India", "ğŸ‡®ğŸ‡© - Indonesia", "ğŸ‡®ğŸ‡· - Iran",
                                       "ğŸ‡®ğŸ‡¶ - Iraq", "ğŸ‡®ğŸ‡ª - Ireland", "ğŸ‡®ğŸ‡± - Israel", "ğŸ‡®ğŸ‡¹ - Italy", "ğŸ‡¨ğŸ‡® - Ivory Coast",
                                       "ğŸ‡¯ğŸ‡² - Jamaica", "ğŸ‡¯ğŸ‡µ - Japan", "ğŸ‡¯ğŸ‡´ - Jordan",
                                       "ğŸ‡°ğŸ‡¿ - Kazakhstan", "ğŸ‡°ğŸ‡ª - Kenya", "ğŸ‡°ğŸ‡® - Kiribati", "ğŸ‡½ğŸ‡° - Kosovo", "ğŸ‡°ğŸ‡¼ - Kuwait",
                                       "ğŸ‡°ğŸ‡¬ - Kyrgyzstan", "ğŸ‡±ğŸ‡¦ - Laos", "ğŸ‡±ğŸ‡» - Latvia",
                                       "ğŸ‡±ğŸ‡§ - Lebanon", "ğŸ‡±ğŸ‡¸ - Lesotho", "ğŸ‡±ğŸ‡· - Liberia", "ğŸ‡±ğŸ‡¾ - Libya",
                                       "ğŸ‡±ğŸ‡® - Liechtenstein", "ğŸ‡±ğŸ‡¹ - Lithuania", "ğŸ‡±ğŸ‡º - Luxembourg", "ğŸ‡²ğŸ‡¬ - Madagascar",
                                       "ğŸ‡²ğŸ‡¼ - Malawi", "ğŸ‡²ğŸ‡¾ - Malaysia", "ğŸ‡²ğŸ‡» - Maldives", "ğŸ‡²ğŸ‡± - Mali", "ğŸ‡²ğŸ‡¹ - Malta",
                                       "ğŸ‡²ğŸ‡­ - Marshall Islands", "ğŸ‡²ğŸ‡· - Mauritania", "ğŸ‡²ğŸ‡º - Mauritius",
                                       "ğŸ‡²ğŸ‡½ - Mexico", "ğŸ‡«ğŸ‡² - Micronesia", "ğŸ‡²ğŸ‡© - Moldova", "ğŸ‡²ğŸ‡¨ - Monaco",
                                       "ğŸ‡²ğŸ‡³ - Mongolia", "ğŸ‡²ğŸ‡ª - Montenegro", "ğŸ‡²ğŸ‡¦ - Morocco", "ğŸ‡²ğŸ‡¿ - Mozambique",
                                       "ğŸ‡²ğŸ‡² - Myanmar", "ğŸ‡³ğŸ‡¦ - Namibia", "ğŸ‡³ğŸ‡· - Nauru", "ğŸ‡³ğŸ‡µ - Nepal", "ğŸ‡³ğŸ‡± - Netherlands",
                                       "ğŸ‡³ğŸ‡¿ - New Zealand", "ğŸ‡³ğŸ‡® - Nicaragua", "ğŸ‡³ğŸ‡ª - Niger",
                                       "ğŸ‡³ğŸ‡¬ - Nigeria", "ğŸ‡°ğŸ‡µ - North Korea", "ğŸ‡³ğŸ‡´ - Norway", "ğŸ‡´ğŸ‡² - Oman", "ğŸ‡µğŸ‡° - Pakistan",
                                       "ğŸ‡µğŸ‡¼ - Palau", "ğŸ‡µğŸ‡¸ - Palestine", "ğŸ‡µğŸ‡¦ - Panama",
                                       "ğŸ‡µğŸ‡¬ - Papua New Guinea", "ğŸ‡µğŸ‡¾ - Paraguay", "ğŸ‡µğŸ‡ª - Peru", "ğŸ‡µğŸ‡­ - Philippines",
                                       "ğŸ‡µğŸ‡± - Poland", "ğŸ‡µğŸ‡¹ - Portugal", "ğŸ‡¶ğŸ‡¦ - Qatar", "ğŸ‡·ğŸ‡´ - Romania",
                                       "ğŸ‡·ğŸ‡º - Russia", "ğŸ‡·ğŸ‡¼ - Rwanda", "ğŸ‡°ğŸ‡³ - Saint Kitts and Nevis", "ğŸ‡±ğŸ‡¨ - Saint Lucia",
                                       "ğŸ‡»ğŸ‡¨ - Saint Vincent and the Grenadines", "ğŸ‡¼ğŸ‡¸ - Samoa",
                                       "ğŸ‡¸ğŸ‡² - San Marino", "ğŸ‡¸ğŸ‡¹ - SÃ£o TomÃ© and PrÃ­ncipe", "ğŸ‡¸ğŸ‡¦ - Saudi Arabia",
                                       "ğŸ‡¸ğŸ‡³ - Senegal", "ğŸ‡·ğŸ‡¸ - Serbia", "ğŸ‡¸ğŸ‡¨ - Seychelles", "ğŸ‡¸ğŸ‡± - Sierra Leone",
                                       "ğŸ‡¸ğŸ‡¬ - Singapore", "ğŸ‡¸ğŸ‡° - Slovakia", "ğŸ‡¸ğŸ‡® - Slovenia", "ğŸ‡¸ğŸ‡§ - Solomon Islands",
                                       "ğŸ‡¸ğŸ‡´ - Somalia", "ğŸ‡¿ğŸ‡¦ - South Africa", "ğŸ‡°ğŸ‡· - South Korea",
                                       "ğŸ‡¸ğŸ‡¸ - South Sudan", "ğŸ‡ªğŸ‡¸ - Spain", "ğŸ‡±ğŸ‡° - Sri Lanka", "ğŸ‡¸ğŸ‡© - Sudan",
                                       "ğŸ‡¸ğŸ‡· - Suriname", "ğŸ‡¸ğŸ‡ª - Sweden", "ğŸ‡¨ğŸ‡­ - Switzerland", "ğŸ‡¸ğŸ‡¾ - Syria",
                                       "ğŸ‡¹ğŸ‡¯ - Tajikistan", "ğŸ‡¹ğŸ‡¿ - Tanzania", "ğŸ‡¹ğŸ‡­ - Thailand", "ğŸ‡¹ğŸ‡± - Timor-Leste",
                                       "ğŸ‡¹ğŸ‡¬ - Togo", "ğŸ‡¹ğŸ‡´ - Tonga", "ğŸ‡¹ğŸ‡¹ - Trinidad and Tobago",
                                       "ğŸ‡¹ğŸ‡³ - Tunisia", "ğŸ‡¹ğŸ‡· - Turkey", "ğŸ‡¹ğŸ‡² - Turkmenistan", "ğŸ‡¹ğŸ‡» - Tuvalu",
                                       "ğŸ‡ºğŸ‡¬ - Uganda", "ğŸ‡ºğŸ‡¦ - Ukraine", "ğŸ‡¦ğŸ‡ª - United Arab Emirates",
                                       "ğŸ‡¬ğŸ‡§ - United Kingdom", "ğŸ‡ºğŸ‡¸ - United States", "ğŸ‡ºğŸ‡¾ - Uruguay", "ğŸ‡ºğŸ‡¿ - Uzbekistan",
                                       "ğŸ‡»ğŸ‡º - Vanuatu", "ğŸ‡»ğŸ‡¦ - Vatican City", "ğŸ‡»ğŸ‡ª - Venezuela",
                                       "ğŸ‡»ğŸ‡³ - Vietnam", "ğŸ‡¾ğŸ‡ª - Yemen", "ğŸ‡¿ğŸ‡² - Zambia", "ğŸ‡¿ğŸ‡¼ - Zimbabwe",

                                       "EU", "Europe", "America", "Asia", "Africa", "Oceania", "World",
                                       "Middle East"
                                   ],
                                   [
                                       "ğŸ‡¦ğŸ‡¹ - Austria", "ğŸ‡§ğŸ‡ª - Belgium", "ğŸ‡§ğŸ‡¬ - Bulgaria", "ğŸ‡­ğŸ‡· - Croatia", "ğŸ‡¨ğŸ‡¾ - Cyprus",
                                       "ğŸ‡¨ğŸ‡¿ - Czech Republic", "ğŸ‡©ğŸ‡° - Denmark",
                                       "ğŸ‡ªğŸ‡ª - Estonia", "ğŸ‡«ğŸ‡® - Finland", "ğŸ‡«ğŸ‡· - France", "ğŸ‡©ğŸ‡ª - Germany", "ğŸ‡¬ğŸ‡· - Greece",
                                       "ğŸ‡­ğŸ‡º - Hungary", "ğŸ‡®ğŸ‡ª - Ireland", "ğŸ‡®ğŸ‡¹ - Italy",
                                       "ğŸ‡±ğŸ‡» - Latvia", "ğŸ‡±ğŸ‡¹ - Lithuania", "ğŸ‡±ğŸ‡º - Luxembourg", "ğŸ‡²ğŸ‡¹ - Malta",
                                       "ğŸ‡³ğŸ‡± - Netherlands", "ğŸ‡µğŸ‡± - Poland", "ğŸ‡µğŸ‡¹ - Portugal",
                                       "ğŸ‡·ğŸ‡´ - Romania", "ğŸ‡¸ğŸ‡° - Slovakia", "ğŸ‡¸ğŸ‡® - Slovenia", "ğŸ‡ªğŸ‡¸ - Spain", "ğŸ‡¸ğŸ‡ª - Sweden"
                                   ]
                                   )

        countries = countries_from_multiselect(countries)
        print("countries: ", countries)


        # initialize the download dataframe
        df_download = pd.DataFrame()
        df_download.drop(df_download.index, inplace=True)

        # List all files that match the pattern
        matching_files = [f for f in os.listdir('synthesis data') if f.startswith(f"{chem}_st")]
        # matching_files = ['posaconazole_st1.csv']
        print("matching files: ", matching_files)

        for synthesis_file in matching_files:

            # look for the synthesis csv file for chem to find the ingredients
            # synthesis_file = f'synthesis data/{chem}_st1.csv'
            synth_df = pd.read_csv(f'synthesis data/{synthesis_file}', encoding='latin1')

            # st.write(f"{synthesis_file.replace('.csv', '')} Data", synth_df)

            gd = GridOptionsBuilder.from_dataframe(synth_df)
            gd.configure_selection(selection_mode='multiple', use_checkbox=True
                                   , pre_select_all_rows=True
                                   )
            gridoptions = gd.build()

            grid_table = AgGrid(synth_df, height=250, gridOptions=gridoptions,
                                update_mode=GridUpdateMode.SELECTION_CHANGED)

            # st.write('## Selected')
            selected_row = grid_table["selected_rows"]

            synth_dict = synth_df.set_index('raw_material')['cid'].to_dict()

            if selected_row != []:

                print("selected_row: ", selected_row)
                df_selected_row = pd.DataFrame(selected_row)
                # st.write("df_selected_row", df_selected_row)
                print("df_selected_row: ", df_selected_row.columns)
                df_selected_row = df_selected_row[['raw_material', 'cid']]

                # st.write(df_selected_row)


                synth_dict = df_selected_row.set_index('raw_material')['cid'].to_dict()

            for synth_chem in synth_dict.keys():
                # synth_chem_df = find_matching_chemicals_from_cid(synth_dict[synth_chem])
                # synth_chem_df = synth_chem_df[['date', 'unit_value_usd', 'country']]
                #
                # # export to csv
                # synth_chem_df.to_csv(f'github upload data/{synth_chem}_synthesis.csv', index=False)

                # load the data
                synth_chem_df = pd.read_csv(f'github upload data/{synth_chem}_synthesis.csv')

                synth_chem_df = synth_chem_df[synth_chem_df['country'].isin(countries)]
                synth_chem_df = synth_chem_df[['date', 'unit_value_usd']]

                print(f"synth_chem_df of {synth_chem} \n", synth_chem_df.head())

                # converting 'Date' to datetime and setting as index
                synth_chem_df['date'] = pd.to_datetime(synth_chem_df['date'])
                synth_chem_df.set_index('date', inplace=True)

                # cleaning the data
                # # Converting everything to Kgs
                # synth_chem_df.loc[synth_chem_df['Unit'] == 'GMS', 'Unit_FOB_Rate'] /= 1000
                # synth_chem_df.loc[synth_chem_df['Unit'] == 'GMS', 'Unit'] = 'KGS'

                # remove outliers
                synth_chem_df['unit_value_usd'] = synth_chem_df['unit_value_usd'].astype(float)
                lower_percentile = 25
                upper_percentile = 75
                lower_threshold = synth_chem_df['unit_value_usd'].quantile(lower_percentile / 100)
                upper_threshold = synth_chem_df['unit_value_usd'].quantile(upper_percentile / 100)

                data_cleaned = synth_chem_df[(synth_chem_df['unit_value_usd'] >= lower_threshold) & (synth_chem_df['unit_value_usd'] <= upper_threshold)]

                # resampling and forward filling
                data_resampled = data_cleaned.resample('D').last()
                data_resampled = data_resampled.interpolate(method='linear')

                st.session_state.synth_chem_df_list.append(data_resampled)

                temp_df = data_resampled.copy()
                temp_df.columns = [synth_chem]
                df_download = pd.concat([df_download, temp_df], axis=1)

            # st.write(st.session_state.synth_chem_df_list)

            # plotting
            fig_prec = go.Figure()

            for synth_chem, data in zip(synth_dict.keys(), st.session_state.synth_chem_df_list):
                smooth_rate = data[['unit_value_usd']].rolling(10).mean().dropna()

                # Add line plot for connecting the data points
                fig_prec.add_trace(go.Scatter(x=data.index, y=smooth_rate['unit_value_usd'], mode='lines',
                                         name=f"{synth_chem}"))

            # Set layout
            fig_prec.update_layout(title=f"{synthesis_file.replace('.csv', '')}", xaxis_title='Date', yaxis_title='FOB Price',
                              plot_bgcolor='rgba(0, 0, 0, 0)')

            # Display the plot
            st.plotly_chart(fig_prec, use_container_width=True)

            st.session_state.synth_chem_df_list = []

        if st.button('Download'):

            # get data from the download_dict
            st.write("### Downloading the chemical dataframe")
            st.write("file name: ", f'{chem}_synthesis_data.csv')
            st.write("file type: ", 'text/csv')
            st.write("file size: ",
                     round(df_download.to_csv().encode('utf-8').__sizeof__() / (1024 * 1024), 2),
                     "Megabytes")
            st.download_button(
                label="Download data as CSV",
                data=df_download.to_csv(),
                file_name=f'{chem}_synth_api.csv',
                mime='text/csv',
            )

run_app()